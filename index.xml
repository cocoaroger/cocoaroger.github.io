<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cocoaroger</title>
    <link>https://cocoaroger.github.io/</link>
    <description>Recent content on cocoaroger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Apr 2018 17:03:05 +0800</lastBuildDate>
    
	<atom:link href="https://cocoaroger.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>iOS组件化实践</title>
      <link>https://cocoaroger.github.io/post/meditor/</link>
      <pubDate>Tue, 10 Apr 2018 17:03:05 +0800</pubDate>
      
      <guid>https://cocoaroger.github.io/post/meditor/</guid>
      <description>前述  目前业界主要两种方式：URL/protocol 注册调度、runtime 调度 此处我采用的 runtime 调度法，参考Casa Taloyum 组件化方案 以 GitHub 中搭建一个新项目为例，之前在公司是用公司搭的gitlab服务器； 在实践后的一些想法，一个项目如果有几十人维护多个子项目时，采用私有仓库源，同时维护多个子项目，是非常好的团队管理方式； 但是如果一个团队人数不多，我觉得就会为团队成员带来一些维护私有仓库的成本，降低了灵活性；因此我在公司时采用了中间件的方案，但是没有采用管理私有仓库源； CRMediator 已发布到公有仓库 此处实践是采用私有库组件化管理  结果 https://github.com/cr-atomic
准备工作  在 GitHub 页面右上角点击 + 然后 New organization`，创建一个 organization 存放源仓库和组件 创建一个 GitHub repo，这个 repo 作为私有 podspecs，可参考CocoaPods公有/私有库管理 创立一个文件夹，例如 Project，把我们的主工程文件夹放到 Project 下，后面的组件和中间件都放在该文件夹  实现效果描述 MainProject是一个非常简单的应用，一共就三个页面。首页 push 到 AViewController，AViewController push 到 BViewController。我们可以理解成这个工程由三个业务组成：首页、A业务、B业务。
我们需要为此做四个私有Pod： * A业务Pod（以后简称A Pod） * 方便其他人调用A业务的CRMediator category的Pod（以后简称A_Category Pod） * A_Category Pod本质上只是一个方便方法，它对A Pod不存在任何依赖 * B业务Pod（以后简称B Pod） * 方便其他人调用B业务的CRMediator category的Pod（以后简称B_Category Pod）</description>
    </item>
    
    <item>
      <title>iOS开发工程师简历</title>
      <link>https://cocoaroger.github.io/post/resume/</link>
      <pubDate>Sun, 01 Apr 2018 16:41:53 +0800</pubDate>
      
      <guid>https://cocoaroger.github.io/post/resume/</guid>
      <description>联系方式  手机：17338665021 Email：coacoaroger@gmail.com  个人信息  吴宣强/男/1990 本科/重庆理工大学软件工程系 工作年限：5年 技术博客：https://cocoaroger.github.io/ Github：https://github.com/cocoaroger 简书：https://www.jianshu.com/u/0491c59e8017 期望职位：iOS开发工程师 期望城市：重庆  工作经历 宁波搜布信息科技有限公司(上海)(2016.6 ~ 2018.1)  在搜布期间，开发完功能之余，不断思考和优化项目架构，提升开发效率，减少 bug 量，自己有了一套成熟的开发模式
 搜布  负责优化项目结构，制定OC代码规范 推动实践组件化开发，共有3人开发，通过中间件进行多人开发，提高项目的可读性和易用性，实践方案：CRMediator 参与开发登录注册优化、布友圈、店铺主页等功能模块 布友圈为类似朋友圈的模块，实践了YYKit的异步加载方案，保证列表在多图、多文本的情况下仍保持60fps的流畅性 店铺主页为类似淘宝店铺主页效果，存在滚动视图嵌套手势问题，最终通过一些特殊设计解决，解决方案： CRShopDetail  CRM(Swift)  该项目是为搜布销员工定制的CRM 该项目是在已有Android版的情况下，花了两周复制了一个iOS版 独立负责架构设计和功能开发、版本迭代优化 开发中实践许多 Swift 特性，提升开发效率、代码安全性、易维护性，降低 bug 率  搜布金管家  该项目主要用于向搜布卖家展示店铺信息，销售情况，强化店铺客服和销售业绩的管理 独立负责架构设计和功能开发、版本迭代优化  上海友闲信息科技有限公司(2015.10 ~ 2016.6)  频繁的版本迭代，增强了自己的应变能力和封装意识，最后达到轻松应对
 玩票卖家  架构搭建，尽可能做到层次清晰，模块化，耦合少，可复用函数逻辑完全分离 项目开发时间估算，从产品整体到细节的深入讨论与思考，技术预演，技术方案定制 抢单功能中，通过状态监听的方式，实现在不同状态下复杂界面交互实现  重庆汇展网络技术有限公司(2014.12 ~ 2015.8) 淘会场  负责封装部分公共UI组件 开发发布需求、场地搜索、询价单模块  重庆掌龙科技有限公司(2013.</description>
    </item>
    
    <item>
      <title>使用 fastlane</title>
      <link>https://cocoaroger.github.io/post/use-fastlane/</link>
      <pubDate>Tue, 26 Sep 2017 14:11:54 +0800</pubDate>
      
      <guid>https://cocoaroger.github.io/post/use-fastlane/</guid>
      <description>以下是我集成 fastlane 的过程
安装 fastlane sudo gem install fastlane
初始化 fastlane cd 到项目目录 执行 fastlane init
两个主要文件配置 fastlane/Appfile 配置 App 基本信息 app_identifier &amp;quot;com.cocoaroger.appstore&amp;quot; # The bundle identifier of your app apple_dev_portal_id &amp;quot;&amp;quot; # Apple Developer Account itunes_connect_id &amp;quot;&amp;quot; # iTunes Connect Account team_id &amp;quot;&amp;quot; # Developer Portal Team ID itc_team_id &amp;quot;&amp;quot; # iTunes Connect Team ID for_lane :adhoc do app_identifier &amp;quot;com.cocoaroger.test&amp;quot; end for_lane :appstore do app_identifier &amp;quot;com.cocoaroger.appstore&amp;quot; end  fastlane/Fastfile 定制我们的自动化脚本 我这里的 appstore 只是打包了，没有直接传到 itunes connect</description>
    </item>
    
    <item>
      <title>Hugo 自动化部署脚本 deploy.py</title>
      <link>https://cocoaroger.github.io/post/hugo-deploy/</link>
      <pubDate>Sat, 26 Aug 2017 17:28:30 +0800</pubDate>
      
      <guid>https://cocoaroger.github.io/post/hugo-deploy/</guid>
      <description>Hugo 自动化部署脚本 deploy.py 是 coderzh 写的
脚本路径：https://github.com/coderzh/coderzh-hugo-blog/blob/master/deploy.py
原理 deploy.py 会自动执行 hugo 命令生成静态站点，然后将生成的文件拷贝到上层的一个目录里，然后，在那个目录里将文件 push 到你指定的 Git Repository 里。
使用方法  将 deploy.py 放到你的 Hugo 站点目录。（和 config.yaml 等文件放一起） 编辑 deploy.py 文件，修改你要部署到的 Git Repository：  GIT_REPO = [ # [别名, 分支名, Git Repo 路径] [&#39;origin&#39;, &#39;gh-pages&#39;, &#39;git@github.com:coderzh/hugo-blog-deployed.git&#39;], [&#39;gitcafe&#39;, &#39;gh-pages&#39;, &#39;git@coding.net:coderzh/coderzh-hugo-blog.git&#39;], ] # 部署到哪里，相对上一级目录。比如下面的配置，会部署到 ../gh-pages 目录里 DEPLOY_DIR = &#39;gh-pages&#39;   如果你的网站需要指定皮肤，需要在 config 文件中指定 theme 。因为我的脚本在生成静态文件时并不会指定皮肤。  theme: &amp;quot;rapid&amp;quot;  第一次执行，使用 first 参数，它会做一些初始化的操作。并使用 -t 表示只是测试一下，并不会真的 push 。  python deploy.</description>
    </item>
    
    <item>
      <title>Objective-C Guide Style</title>
      <link>https://cocoaroger.github.io/post/oc-guide-style/</link>
      <pubDate>Sat, 26 Aug 2017 10:57:31 +0800</pubDate>
      
      <guid>https://cocoaroger.github.io/post/oc-guide-style/</guid>
      <description>Remember that code is read much more often than it is written, and that 80% of the lifetime cost of software goes to maintenance.
 在 搜布 与 racechao 一起整理
目录  参考和引用 快捷键的使用 命名规则  变量命名 常量命名 类命名 类属性定义 方法的声明和定义 方法中 {} 的位置  字面量 布尔 枚举类型 Block Protocols 代码组织 Xcode 工程 Best Practices  参考和引用  纽约时报 Objective-C 规范指南  快捷键的使用  快速生成注释格式化：在声明的上一行 &amp;ldquo;option+command+/&amp;rdquo; 格式化代码：选中需要格式化的代码 &amp;ldquo;control+i&amp;rdquo;  命名规则 变量命名  变量名应使用容易意会的全称，采用驼峰命名法，且首字母小写。 变量命名不允许出现中文拼音，应该使用英文对变量进行命名。  常量命名  const  使用小写“k”作为前缀,首字母大写来分割单词。如: kInvalidHandle。 如果是NotificationName常量，不要使用k开头，以Notification结尾，如：UITextFieldDidBeginEditingNotification  // 规范事例 static const NSTimeInterval kRWTTutorialViewControllerNavigationFadeAnimationDuration = 0.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cocoaroger.github.io/about/</link>
      <pubDate>Fri, 11 Aug 2017 15:52:14 +0800</pubDate>
      
      <guid>https://cocoaroger.github.io/about/</guid>
      <description>目前从事 iOS
此处记录一些思考和总结</description>
    </item>
    
    <item>
      <title>CocoaPods公有/私有库管理</title>
      <link>https://cocoaroger.github.io/post/cocoapods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cocoaroger.github.io/post/cocoapods/</guid>
      <description>创建公有库 注册 CocoaPods 账号 注册一个CocoaPods账号，我们使用终端注册, email 用你的 GitHub 邮箱
pod trunk register &#39;GitHub_email&#39; &#39;user_name&#39; --verbose  查看注册信息
pod trunk me  创建 git 仓库 在 GitHub 创建一个公开项目，项目中必须包含几个文件 * LICENSE: 开源许可证 * README.md: 仓库说明 * CRMediator.podspec: CocoaPods 的描述文件
创建 .podspec pod spec create CRMediator   修改描述文件,例如： ``` Pod::Spec.new do |s| s.name = &amp;lsquo;CRMediator&amp;rsquo; s.summary = &amp;lsquo;组件化中间件&amp;rsquo; s.version = &amp;lsquo;0.0.1&amp;rsquo; s.homepage = &amp;lsquo;https://github.com/cocoaroger/CRMediator&#39; s.license = { :type =&amp;gt; &amp;lsquo;MIT&amp;rsquo;, :file =&amp;gt; &amp;lsquo;LICENSE&amp;rsquo; } s.</description>
    </item>
    
  </channel>
</rss>